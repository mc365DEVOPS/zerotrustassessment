"use strict";(self.webpackChunkztassess=self.webpackChunkztassess||[]).push([[2820],{61379:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var n=t(85893),o=t(11151);const a={},r="004: Scope Tags",i={id:"workshop-guidance/devices/RMD_004",title:"004: Scope Tags",description:"Overview",source:"@site/docs/workshop-guidance/devices/RMD_004.md",sourceDirName:"workshop-guidance/devices",slug:"/workshop-guidance/devices/RMD_004",permalink:"/zerotrustassessment/docs/workshop-guidance/devices/RMD_004",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/zerotrustassessment/tree/main/src/react/docs/workshop-guidance/devices/RMD_004.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"003: User groups",permalink:"/zerotrustassessment/docs/workshop-guidance/devices/RMD_003"},next:{title:"005: Scope Groups",permalink:"/zerotrustassessment/docs/workshop-guidance/devices/RMD_005"}},c={},d=[{value:"Overview",id:"overview",level:2},{value:"Reference",id:"reference",level:2}];function l(e){const s={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"004-scope-tags",children:"004: Scope Tags"}),"\n",(0,n.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,n.jsx)(s.p,{children:"You can use role-based access control and scope tags to make sure that the right admins have the correct access and visibility to the required Intune objects. Roles determine what access admins have to which objects. Scope tags determine which objects admins can see."}),"\n",(0,n.jsx)(s.p,{children:"For example, let's say a Seattle regional office admin has the Policy and Profile Manager role. You want this admin to see and manage only the profiles and policies that only apply to Seattle devices. To set up this access, you would:"}),"\n",(0,n.jsx)(s.p,{children:"Create a scope tag called Seattle.\nCreate a role assignment for the Policy and Profile Manager role with:\nMembers (Groups) = A security group named Seattle IT admins. All admins in this group will have permission to manage policies and profiles for users/devices in the Scope (Groups).\nScope (Groups) = A security group named Seattle users. All users/devices in this group can have their profiles and policies managed by the admins in the Members (Groups).\nScope (Tags) = Seattle. Admins in the Member (Groups) can see Intune objects that also have the Seattle scope tag.\nAdd the Seattle scope tag to policies and profiles that you want admins in Members (Groups) to have access to.\nAdd the Seattle scope tag to devices that you want visible to admins in the Members (Groups)."}),"\n",(0,n.jsx)(s.h2,{id:"reference",children:"Reference"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://learn.microsoft.com/en-us/mem/intune/fundamentals/scope-tags",children:"https://learn.microsoft.com/en-us/mem/intune/fundamentals/scope-tags"})}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,o.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},11151:(e,s,t)=>{t.d(s,{Z:()=>i,a:()=>r});var n=t(67294);const o={},a=n.createContext(o);function r(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);